import asyncio
import json
import datetime
import time
import requests
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import aiohttp

import config
import database

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
_formatted_data_cache = {}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: {is_admin: bool, timestamp: time})
_admin_status_cache = {}

# Create scheduler for daily notifications
scheduler = AsyncIOScheduler(timezone=pytz.UTC)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
session = None

async def setup_aiohttp_session():
    global session
    session = aiohttp.ClientSession()

# Function to log bot actions
async def log_bot_action(action, user_id=None, username=None):
    """Log bot actions and save to database if user_id is provided"""
    timestamp = datetime.datetime.now().isoformat()
    user_info = f"[USER:{user_id}|{username}]" if user_id else ""
    print(f"[{timestamp}] {user_info} Bot Action: {action}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 
    # (–±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - —Å–º. log_user_action)
    if user_id:
        await database.log_user_action(action, user_id, username)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API
async def send_telegram_request_async(method, params=None):
    """Send request to Telegram API using async client"""
    global session
    url = f"{config.TELEGRAM_API_URL}/{method}"
    
    try:
        async with session.post(url, json=params if params else {}) as response:
            return await response.json()
    except Exception as e:
        print(f"Error sending Telegram request: {e}")
        # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å
        if session.closed:
            session = aiohttp.ClientSession()
            async with session.post(url, json=params if params else {}) as response:
                return await response.json()
        raise

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
def send_telegram_request(method, params=None):
    """Create async task for telegram request and return placeholder"""
    asyncio.create_task(send_telegram_request_async(method, params))
    return {"ok": True, "result": []}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ None

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
def format_top_apy_data(data, position):
    """Format APY data for display with ranking"""
    if not data:
        return "No data available"
    
    # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º APY –≤ –∫–ª—é—á –∫—ç—à–∞, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    cache_key = f"{data.get('pool_id', '')}_{data.get('apy')}_{position}"
    
    if cache_key in _formatted_data_cache:
        return _formatted_data_cache[cache_key]
    
    # Extract protocol name from pool_id
    pool_id = data.get('pool_id', '')
    protocol_parts = pool_id.split('_')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 —á–∞—Å—Ç–∏ –≤ pool_id
    if len(protocol_parts) >= 3:
        # –ë–µ—Ä–µ–º —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—è –∏—Ö —Å–Ω–æ–≤–∞ —Å '_'
        protocol = '_'.join(protocol_parts[2:])
    else:
        # –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –º–µ–Ω—å—à–µ 3, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        protocol = protocol_parts[0] if protocol_parts else ''
    
    # Format TVL
    tvl = data.get('tvl', 0)
    if tvl >= 1000000:
        tvl_formatted = f"${tvl / 1000000:.1f}M"
    elif tvl >= 1000:
        tvl_formatted = f"${tvl / 1000:.1f}K"
    else:
        tvl_formatted = f"${tvl:.0f}"
    
    # Select emoji for position
    position_emoji = 'ü•á' if position == 1 else 'ü•à' if position == 2 else 'ü•â' if position == 3 else 'üèÖ'
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ APY –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None –∏ –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    apy = data.get('apy')
    apy_base = data.get('apy_base')
    apy_reward = data.get('apy_reward')
    apy_mean_30d = data.get('apy_mean_30d')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π APY
    apy_total = f"{apy:.2f}%" if apy is not None else 'N/A'
    apy_base_fmt = f"{apy_base:.2f}%" if apy_base is not None else 'N/A'
    apy_reward_fmt = f"{apy_reward:.2f}%" if apy_reward is not None else 'N/A'
    apy_mean_30d_fmt = f"{apy_mean_30d:.2f}%" if apy_mean_30d is not None else 'N/A'
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    protocol_safe = protocol.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
    
    # Add link to pool site, if available
    site_link = f"   ‚îú [Pool Site]({data.get('site_url')})\n" if data.get('site_url') else ''
    
    try:
        result = (
            f"{position_emoji} *{data.get('asset')}* on *{data.get('chain')}*\n"
            f"   ‚îå Protocol: *{protocol_safe}*\n"
            f"{site_link}"
            f"   ‚îú APY Total: *{apy_total}*\n"
            f"   ‚îú APY Base: {apy_base_fmt}\n"
            f"   ‚îú APY Reward: {apy_reward_fmt}\n"
            f"   ‚îú Avg APY 30d: {apy_mean_30d_fmt}\n"
            f"   ‚îî TVL: {tvl_formatted}"
        )
    except Exception as e:
        print(f"[FORMAT ERROR] Error formatting pool data: {e}")
        # –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        result = (
            f"{position_emoji} Asset: {data.get('asset')} on {data.get('chain')}\n"
            f"Protocol: {protocol}\n"
            f"APY: {apy_total}\n"
            f"TVL: {tvl_formatted}"
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    _formatted_data_cache[cache_key] = result
    return result

# Function to create paginated assets keyboard
async def create_paginated_assets_keyboard(page=0, items_per_page=12):
    """Create a keyboard with pagination for assets"""
    assets = await database.get_all_assets()
    
    # Calculate assets for the current page
    start_index = page * items_per_page
    end_index = min(start_index + items_per_page, len(assets))
    page_assets = assets[start_index:end_index]
    
    # Format keyboard: 3 assets per row
    keyboard = []
    row = []
    
    for i, asset in enumerate(page_assets):
        row.append({"text": asset, "callback_data": f"asset_{asset}"})
        
        # Add 3 buttons per row
        if len(row) == 3 or i == len(page_assets) - 1:
            keyboard.append(row.copy())
            row = []
    
    # Add navigation buttons
    nav_row = []
    if page > 0:
        nav_row.append({"text": "‚¨ÖÔ∏è Previous", "callback_data": f"page_{page-1}"})
    
    # –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É Back - —É–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    nav_row.append({"text": "Back", "callback_data": "back_to_main"})
    
    if end_index < len(assets):
        nav_row.append({"text": "Next ‚û°Ô∏è", "callback_data": f"page_{page+1}"})
    
    keyboard.append(nav_row)
    
    return {"inline_keyboard": keyboard}

# Function to create paginated chains keyboard
async def create_paginated_chains_keyboard(page=0, items_per_page=12):
    """Create a keyboard with pagination for chains"""
    chains = await database.get_all_chains()
    
    # Calculate chains for the current page
    start_index = page * items_per_page
    end_index = min(start_index + items_page, len(chains))
    page_chains = chains[start_index:end_index]
    
    # Format keyboard: 3 chains per row
    keyboard = []
    row = []
    
    for i, chain in enumerate(page_chains):
        row.append({"text": chain, "callback_data": f"chain_{chain}"})
        
        # Add 3 buttons per row
        if len(row) == 3 or i == len(page_chains) - 1:
            keyboard.append(row)
            row = []
    
    # Add pagination buttons if needed
    has_prev = page > 0
    has_next = end_index < len(chains)
    
    pagination_row = []
    if has_prev:
        pagination_row.append({"text": "‚óÄÔ∏è Prev", "callback_data": f"chains_page_{page-1}"})
        
    pagination_row.append({"text": "Back", "callback_data": "back_to_main"})
    
    if has_next:
        pagination_row.append({"text": "Next ‚ñ∂Ô∏è", "callback_data": f"chains_page_{page+1}"})
    
    if pagination_row:
        keyboard.append(pagination_row)
    
    return {"inline_keyboard": keyboard}

# Function to create main menu
async def create_main_menu(user_id):
    """Create the main menu with admin options if applicable"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
    is_admin = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à - –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–≤–µ–∂–µ–µ 1 —á–∞—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if str(user_id) in _admin_status_cache and (time.time() - _admin_status_cache[str(user_id)]["timestamp"]) < 3600:
        is_admin = _admin_status_cache[str(user_id)]["is_admin"]
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –∏–∑ –±–∞–∑—ã
        is_admin = await database.is_user_admin(user_id)
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        _admin_status_cache[str(user_id)] = {"is_admin": is_admin, "timestamp": time.time()}
    
    # Basic buttons for all users
    keyboard = {
        "inline_keyboard": [
            [{"text": "ü•á TOP-1", "callback_data": "show_top_1"}],
            [{"text": "ü•â TOP-3", "callback_data": "show_top_3"}],
            [{"text": "üí≤ Select Assets", "callback_data": "show_assets"}],
            [{"text": "üîó Select Chains", "callback_data": "show_chains"}],
            [{"text": "üíª Request Feature", "callback_data": "feedback"}]
        ]
    }
    
    # Add analytics button only for admins
    if is_admin:
        keyboard["inline_keyboard"].append([{"text": "Analytics", "callback_data": "show_analytics"}])
    
    return keyboard

# Process incoming message
async def process_message(message):
    """Process incoming Telegram messages"""
    # Extract message data
    message_id = message.get('message_id')
    chat_id = message.get('chat', {}).get('id')
    text = message.get('text', '')
    user_id = message.get('from', {}).get('id')
    username = message.get('from', {}).get('username', f"user_{user_id}")
    
    # Process commands
    if text == '/start':
        await handle_start_command(chat_id, user_id, username)
    elif text == '/top':
        await handle_top_command(chat_id)
    elif text == '/assets':
        await handle_assets_command(chat_id)
    elif text == '/chains':
        # –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_job = scheduler.get_job('daily_notification')
        
        if notification_job:
            next_run = notification_job.next_run_time
            now = datetime.datetime.now(pytz.UTC)
            time_until_next = next_run - now
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
            await send_telegram_request_async("sendMessage", {
                "chat_id": chat_id,
                "text": f"üìÖ Next notification scheduled for:\n{next_run.strftime('%Y-%m-%d %H:%M:%S')} UTC\n\n‚è±Ô∏è Time remaining: {time_until_next}"
            })
        else:
            await send_telegram_request_async("sendMessage", {
                "chat_id": chat_id,
                "text": "‚ùå Notification task not found!"
            })
    elif text == '/refresh' and await database.is_user_admin(user_id):
        await send_telegram_request_async("sendMessage", {
            "chat_id": chat_id,
            "text": "üîÑ Forcing refresh of all caches..."
        })
        
        success = await database.force_refresh_all_caches()
        
        if success:
            await send_telegram_request_async("sendMessage", {
                "chat_id": chat_id,
                "text": "‚úÖ All caches successfully updated with current data"
            })
        else:
            await send_telegram_request_async("sendMessage", {
                "chat_id": chat_id,
                "text": "‚ùå Error updating caches"
            })

# Handle /start command
async def handle_start_command(chat_id, user_id, username):
    """Handle the /start command"""
    await log_bot_action("start command", user_id, username)
    
    # Register user
    await database.get_or_create_user(user_id, username)
    
    keyboard = await create_main_menu(user_id)
    
    await send_telegram_request_async("sendMessage", {
        "chat_id": chat_id,
        "text": (
            "Welcome to the Stablecoin Yield Bot by Yieldex!\n"
            "This bot tracks the most profitable stablecoin pools in the DeFi market sorted by total APY (native+reward) and shares updates daily.\n\n"
            "What would you like to do next?\n\n"
            "_(The data about the best pool is sent at 12:00 UTC daily)_"
        ),
        "reply_markup": keyboard,
        "parse_mode": "Markdown"
    })

# Handle /top command
async def handle_top_command(chat_id):
    """Handle the /top command"""
    top_apys = await database.get_top_three_apy()
    
    if top_apys:
        message = "‚ú® TOP STABLE OPPORTUNITIES ‚ú®\n\n"
        
        for i, item in enumerate(top_apys):
            message += format_top_apy_data(item, i + 1)
            if i < len(top_apys) - 1:
                message += "\n\n"
        
        # Add back button
        back_keyboard = {
            "inline_keyboard": [
                [{"text": "Back to Menu", "callback_data": "back_to_main"}]
            ]
        }
        
        await send_telegram_request_async("sendMessage", {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "Markdown",
            "reply_markup": back_keyboard,
            "disable_web_page_preview": True
        })
    else:
        await send_telegram_request_async("sendMessage", {
            "chat_id": chat_id,
            "text": "Failed to retrieve data about the best APY.",
            "reply_markup": {
                "inline_keyboard": [
                    [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                ]
            }
        })

# Handle /assets command
async def handle_assets_command(chat_id):
    """Handle the /assets command to show list of assets"""
    assets = await database.get_all_assets()
    
    if not assets:
        await send_telegram_request_async("sendMessage", {
            "chat_id": chat_id,
            "text": "Sorry, I couldn't retrieve the list of assets at the moment. Please try again later.",
            "reply_markup": {
                "inline_keyboard": [
                    [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                ]
            }
        })
        return
    
    # Show assets with pagination
    keyboard = await create_paginated_assets_keyboard()
    
    await send_telegram_request_async("sendMessage", {
        "chat_id": chat_id,
        "text": "Select Asset:",
        "reply_markup": keyboard
    })

# Handle /chains command
async def handle_chains_command(chat_id):
    """Handle the /chains command to show list of chains"""
    chains = await database.get_all_chains()
    
    if not chains:
        await send_telegram_request_async("sendMessage", {
            "chat_id": chat_id,
            "text": "Sorry, I couldn't retrieve the list of chains at the moment. Please try again later.",
            "reply_markup": {
                "inline_keyboard": [
                    [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                ]
            }
        })
        return
    
    # Show chains with pagination
    keyboard = await create_paginated_chains_keyboard()
    
    await send_telegram_request_async("sendMessage", {
        "chat_id": chat_id,
        "text": "Select Chain:",
        "reply_markup": keyboard
    })

# Handle callback queries
async def handle_callback_query(callback_query):
    """Handle callback queries from inline buttons"""
    # –û–±—ä—è–≤–ª–µ–Ω–∏–µ global –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    global _formatted_data_cache
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–∑—É
    query_id = callback_query.get("id")
    await send_telegram_request_async("answerCallbackQuery", {
        "callback_query_id": query_id
    })
    
    # –ó–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    message_id = callback_query.get("message", {}).get("message_id")
    chat_id = callback_query.get("message", {}).get("chat", {}).get("id")
    data = callback_query.get("data")
    user_id = callback_query.get("from", {}).get("id")
    username = callback_query.get("from", {}).get("username", f"user_{user_id}")
    
    # Log action in background, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    asyncio.create_task(log_bot_action(data, user_id, username))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback...
    
    # Handle 'show_top_3' button
    if data == "show_top_3":
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        _formatted_data_cache.clear()
        
        top_apys = await database.get_top_three_apy()
        
        if top_apys:
            # Format date as DD/MM/YY
            today = datetime.datetime.now()
            formatted_date = today.strftime("%d/%m/%y")
            
            message = f"üí∞TOP STABLECOIN POOLS {formatted_date}\n\n"
            
            for i, item in enumerate(top_apys):
                message += format_top_apy_data(item, i + 1)
                if i < len(top_apys) - 1:
                    message += "\n\n"
            
            message += "\n\n_Only the pools with more than $1M TVL are shown_"
            
            # Add back button
            back_keyboard = {
                "inline_keyboard": [
                    [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                ]
            }
            
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": message,
                "reply_markup": back_keyboard,
                "parse_mode": "Markdown",
                "disable_web_page_preview": True
            })
        else:
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": "Failed to retrieve data about the top APY opportunities.",
                "reply_markup": {
                    "inline_keyboard": [
                        [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                    ]
                }
            })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle 'show_assets' button
    if data == "show_assets":
        keyboard = await create_paginated_assets_keyboard()
        
        await send_telegram_request_async("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": "Select Asset:",
            "reply_markup": keyboard
        })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle 'show_top_1' button
    if data == "show_top_1":
        await handle_show_top_1(chat_id, message_id, query_id)
        return
    
    # Handle 'feedback' button
    if data == "feedback":
        await send_telegram_request_async("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": "To request a feature or leave feedback, feel free to send a DM to @konstantin_hardcore",
            "reply_markup": {
                "inline_keyboard": [
                    [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                ]
            }
        })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle 'back_to_main' button
    if data == "back_to_main":
        keyboard = await create_main_menu(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
        message_text = callback_query.get("message", {}).get("text", "")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –∏–ª–∏ —Ü–µ–ø–µ–π, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_text in ["Select Asset:", "Select Chain:"]:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": (
                    "Welcome to the Stablecoin Yield Bot by Yieldex!\n"
                    "This bot tracks the most profitable stablecoin pools in the DeFi market sorted by total APY (native+reward) and shares updates daily.\n\n"
                    "What would you like to do next?\n\n"
                    "_(The data about the best pool is sent at 12:00 UTC daily)_"
                ),
                "reply_markup": keyboard,
                "parse_mode": "Markdown"
            })
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            await send_telegram_request_async("sendMessage", {
                "chat_id": chat_id,
                "text": (
                    "Welcome to the Stablecoin Yield Bot by Yieldex!\n"
                    "This bot tracks the most profitable stablecoin pools in the DeFi market sorted by total APY (native+reward) and shares updates daily.\n\n"
                    "What would you like to do next?\n\n"
                    "_(The data about the best pool is sent at 12:00 UTC daily)_"
                ),
                "reply_markup": keyboard,
                "parse_mode": "Markdown"
            })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle asset selection
    if data.startswith("asset_"):
        asset = data[6:]  # Extract asset name
        top_asset_apy = await database.get_top_apy_for_asset(asset)
        
        if top_asset_apy:
            message = f"*Top APY for {asset}*\n\n"
            
            for i, item in enumerate(top_asset_apy):
                message += format_top_apy_data(item, i + 1)
                if i < len(top_asset_apy) - 1:
                    message += "\n\n"
            
            # Add back buttons
            back_keyboard = {
                "inline_keyboard": [
                    [{"text": "Back to Assets", "callback_data": "show_assets"}],
                    [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                ]
            }
            
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": message,
                "reply_markup": back_keyboard,
                "parse_mode": "Markdown",
                "disable_web_page_preview": True
            })
        else:
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": f"Failed to retrieve APY data for asset {asset}.",
                "reply_markup": {
                    "inline_keyboard": [
                        [{"text": "Back to Assets", "callback_data": "show_assets"}],
                        [{"text": "Back to Main Menu", "callback_data": "back_to_main"}]
                    ]
                }
            })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle pagination
    if data.startswith("page_"):
        page = int(data.split("_")[1])
        keyboard = await create_paginated_assets_keyboard(page)
        
        await send_telegram_request_async("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": "Select Asset:",
            "reply_markup": keyboard
        })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle 'show_menu' button
    if data == "show_menu":
        keyboard = await create_main_menu(user_id)
        
        await send_telegram_request_async("sendMessage", {
            "chat_id": chat_id,
            "text": (
                "Welcome to the Stablecoin Yield Bot by Yieldex!\n"
                "This bot tracks the most profitable stablecoin pools in the DeFi market sorted by total APY (native+reward) and shares updates daily.\n\n"
                "What would you like to do next?\n\n"
                "_(The data about the best pool is sent at 12:00 UTC daily)_"
            ),
            "reply_markup": keyboard,
            "parse_mode": "Markdown"
        })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle 'show_analytics' button
    if data == "show_analytics":
        is_admin = await database.is_user_admin(user_id)
        
        if not is_admin:
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": "Access denied. This feature is available only for administrators.",
                "reply_markup": {
                    "inline_keyboard": [
                        [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                    ]
                }
            })
            
            await send_telegram_request_async("answerCallbackQuery", {
                "callback_query_id": query_id
            })
            return
        
        analytics = await database.get_analytics()
        
        if not analytics:
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": "Failed to generate analytics report.",
                "reply_markup": {
                    "inline_keyboard": [
                        [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                    ]
                }
            })
            
            await send_telegram_request_async("answerCallbackQuery", {
                "callback_query_id": query_id
            })
            return
        
        # Function to safely escape markdown characters
        def escape_markdown(text):
            if not isinstance(text, str):
                text = str(text)
            return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
        
        # Format the report
        message = "üìä *Bot Analytics Report*\n\n"
        
        # User information
        message += "üë• *Users*\n"
        message += f"‚Ä¢ Total: {analytics['new_users']['total']}\n"
        message += f"‚Ä¢ New today: {analytics['new_users']['today']}\n"
        message += f"‚Ä¢ New this week: {analytics['new_users']['week']}\n"
        message += f"‚Ä¢ New this month: {analytics['new_users']['month']}\n\n"
        
        # All-time actions
        message += "üîÑ *All Time Actions*\n"
        if analytics['actions']:
            for item in analytics['actions']:
                message += f"‚Ä¢ {escape_markdown(item['action'])}: {item['count']}\n"
        else:
            message += "No actions recorded.\n"
        
        # Today's actions
        message += "\nüìà *Today's Actions*\n"
        if analytics['today_actions']:
            for item in analytics['today_actions']:
                message += f"‚Ä¢ {escape_markdown(item['action'])}: {item['count']}\n"
        else:
            message += "No actions recorded today.\n"
        
        # Add back button
        back_keyboard = {
            "inline_keyboard": [
                [{"text": "Back to Menu", "callback_data": "back_to_main"}]
            ]
        }
        
        await send_telegram_request_async("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": message,
            "reply_markup": back_keyboard,
            "parse_mode": "Markdown",
            "disable_web_page_preview": True
        })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle 'show_chains' button
    if data == "show_chains":
        keyboard = await create_paginated_chains_keyboard()
        
        await send_telegram_request_async("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": "Select Chain:",
            "reply_markup": keyboard
        })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle chain pagination
    if data.startswith("chains_page_"):
        page = int(data.split("_")[2])
        keyboard = await create_paginated_chains_keyboard(page)
        
        await send_telegram_request_async("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": "Select Chain:",
            "reply_markup": keyboard
        })
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Handle chain selection
    if data.startswith("chain_"):
        chain = data[6:]  # Extract chain name
        await log_bot_action(f"chain_{chain}", user_id, username)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ø–∏
            top_apys = await database.get_top_apy_for_chain(chain)
            
            if top_apys:
                # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Ü–µ–ø–µ–π
                message = f"‚ú® TOP OPPORTUNITIES ON {chain.upper()} ‚ú®\n\n"
                
                for i, item in enumerate(top_apys):
                    try:
                        print(f"[DEBUG] Formatting pool {i+1} for {chain}: asset={item.get('asset')}, apy={item.get('apy')}")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—É–ª–æ–≤
                        pool_text = format_top_apy_data(item, i + 1)
                        message += pool_text
                        if i < len(top_apys) - 1:
                            message += "\n\n"
                    except Exception as e:
                        print(f"[DEBUG] Error formatting pool {i+1}: {e}")
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        message += f"Pool {i+1}: {item.get('asset')} with APY {item.get('apy', 'N/A')}%\n"
                
                # Add back button
                back_keyboard = {
                    "inline_keyboard": [
                        [{"text": "Back to Chains", "callback_data": "show_chains"}],
                        [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                    ]
                }
                
                try:
                    await send_telegram_request_async("editMessageText", {
                        "chat_id": chat_id,
                        "message_id": message_id,
                        "text": message,
                        "parse_mode": "Markdown",
                        "reply_markup": back_keyboard,
                        "disable_web_page_preview": True
                    })
                    print(f"[DEBUG] Successfully sent message for chain '{chain}'")
                except Exception as e:
                    print(f"[DEBUG] Error sending message: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown
                    await send_telegram_request_async("editMessageText", {
                        "chat_id": chat_id,
                        "message_id": message_id,
                        "text": f"Error formatting message for {chain}. Technical details: {str(e)}",
                        "reply_markup": back_keyboard
                    })
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—é–±–æ–π —Ü–µ–ø–∏
                await send_telegram_request_async("editMessageText", {
                    "chat_id": chat_id,
                    "message_id": message_id,
                    "text": f"No data available for chain '{chain}'. This chain may not have any pools or may be listed under a different name.",
                    "reply_markup": {
                        "inline_keyboard": [
                            [{"text": "Back to Chains", "callback_data": "show_chains"}],
                            [{"text": "Back to Menu", "callback_data": "back_to_main"}]
                        ]
                    }
                })
        except Exception as e:
            print(f"[DEBUG] Unexpected error processing chain '{chain}': {e}")
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫...
        
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Answer callback query to remove loading state
    await send_telegram_request_async("answerCallbackQuery", {
        "callback_query_id": query_id
    })

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_daily_notification():
    """Send daily notification to all subscribed users"""
    # –î–æ–±–∞–≤–ª—è–µ–º global –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    global _formatted_data_cache
    
    timestamp = datetime.datetime.now().isoformat()
    print(f"[{timestamp}] ‚è∞ Executing scheduled daily notification")
    
    try:
        print(f"[{timestamp}] üîÑ Forcing full cache refresh")
        success = await database.force_refresh_all_caches()
        
        if success:
            print(f"[{timestamp}] ‚úÖ Cache forcefully refreshed with new data")
        else:
            print(f"[{timestamp}] ‚ö†Ô∏è Cache refresh failed, using existing data")
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        _formatted_data_cache.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–æ–≤—ã–π –ø—É–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        top_apy = await database.get_top_apy()
        
        if not top_apy:
            print(f"[{timestamp}] ‚ùå Failed to retrieve top APY data, aborting notification")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ TEST_NOTIFICATION)
        subscribers = await database.get_subscribed_users()
        print(f"[{timestamp}] üìã Found {len(subscribers)} subscribers")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        menu_keyboard = {
            "inline_keyboard": [
                [{"text": "Open Main Menu", "callback_data": "show_menu"}]
            ]
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        today = datetime.datetime.now()
        formatted_date = today.strftime("%d/%m/%y")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üí∞TOP STABLECOIN POOL {formatted_date}\n\n"
        message += format_top_apy_data(top_apy, 1)
        message += "\n\n_Only the pools with more than $1M TVL are shown_"
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        sent_count = 0
        error_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for user in subscribers:
            user_id = user.get('telegram_id')
            print(f"[{timestamp}] üì§ Sending notification to user {user_id}")
            
            try:
                result = await send_telegram_request_async("sendMessage", {
                    "chat_id": user_id,
                    "text": message,
                    "parse_mode": "Markdown",
                    "reply_markup": menu_keyboard,
                    "disable_web_page_preview": True
                })
                
                if result and result.get("ok"):
                    print(f"[{timestamp}] ‚úÖ Notification sent to user {user_id}")
                    sent_count += 1
                    await log_bot_action("notification_sent", user_id, user.get("username"))
                else:
                    print(f"[{timestamp}] ‚ö†Ô∏è Failed to send notification to user {user_id}: {result}")
                    
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —á–∏—Å–ª–æ–≤—ã–º ID
                    try:
                        numeric_id = int(user_id)
                        result = await send_telegram_request_async("sendMessage", {
                            "chat_id": numeric_id,
                            "text": message,
                            "parse_mode": "Markdown",
                            "reply_markup": menu_keyboard,
                            "disable_web_page_preview": True
                        })
                        
                        if result and result.get("ok"):
                            print(f"[{timestamp}] ‚úÖ Notification sent to user {numeric_id} (numeric)")
                            sent_count += 1
                            await log_bot_action("notification_sent", user_id, user.get("username"))
                        else:
                            print(f"[{timestamp}] ‚ùå Failed with numeric ID for user {user_id}: {result}")
                            error_count += 1
                    except Exception as e:
                        print(f"[{timestamp}] ‚ùå Error sending with numeric ID to {user_id}: {e}")
                        error_count += 1
            except Exception as e:
                print(f"[{timestamp}] ‚ùå Error sending notification to {user_id}: {e}")
                error_count += 1
        
        print(f"[{timestamp}] üìä Notification summary: {sent_count} sent, {error_count} errors")
    except Exception as e:
        print(f"[{timestamp}] üö® CRITICAL ERROR in send_daily_notification: {e}")

    # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
    _formatted_data_cache = {}

# Setup polling
async def poll_updates():
    """Poll for updates from Telegram"""
    offset = None
    
    while True:
        try:
            params = {"timeout": 30}
            if offset:
                params["offset"] = offset
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–º–µ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
            response = await send_telegram_request_async("getUpdates", params)
            
            if response and response.get("ok") and response.get("result"):
                updates = response["result"]
                
                for update in updates:
                    offset = update["update_id"] + 1
                    
                    if "message" in update and "text" in update["message"]:
                        await process_message(update["message"])
                    
                    if "callback_query" in update:
                        await handle_callback_query(update["callback_query"])
            
            # If no updates, wait a bit to avoid hammering the API
            if not response or not response.get("result"):
                await asyncio.sleep(1)
                
        except Exception as e:
            print(f"Error in polling: {e}")
            await asyncio.sleep(5)  # Wait a bit longer if there's an error

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
async def setup_cache_updater():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print("[SETUP] Setting up cache updater job...")
    scheduler.add_job(
        database.update_all_caches,
        'interval',
        minutes=15,
        id='cache_updater',
        replace_existing=True
    )
    print("[SETUP] Cache updater job scheduled to run every 15 minutes")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    print("[SETUP] Starting initial cache update...")
    try:
        await database.update_all_caches()
        print("[SETUP] Initial cache update completed successfully")
    except Exception as e:
        print(f"[SETUP] Error during initial cache update: {e}")
        print("[SETUP] Bot will continue with empty cache and retry later")
    
    print("[SETUP] Cache setup completed")

async def preload_common_data():
    """Preload commonly accessed data in background"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await asyncio.gather(
            database.get_top_apy(),
            database.get_top_three_apy(),
            database.get_all_assets(),
            database.get_all_chains()
        )
        print("[PRELOAD] Common data preloaded successfully")
    except Exception as e:
        print(f"[PRELOAD] Error preloading data: {e}")

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_notification_schedule():
    """Check and output info about scheduled notifications"""
    notification_job = scheduler.get_job('daily_notification')
    
    if notification_job:
        next_run = notification_job.next_run_time
        now = datetime.datetime.now(pytz.UTC)
        time_until_next = next_run - now
        
        print(f"üïí Next notification scheduled for: {next_run}")
        print(f"‚è±Ô∏è Time until next notification: {time_until_next}")
        print(f"üìã Job details: Trigger type: {type(notification_job.trigger).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        if isinstance(notification_job.trigger, CronTrigger):
            fields = notification_job.trigger.fields
            for field in fields:
                if field.name in ('hour', 'minute'):
                    print(f"  - {field.name}: {field}")
        
        return True
    else:
        print("‚ùå No notification job found!")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "show_top_1"
async def handle_show_top_1(chat_id, message_id, query_id):
    """Handle 'show_top_1' callback - show top-1 APY"""
    # –û–±—ä—è–≤–ª–µ–Ω–∏–µ global –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    global _formatted_data_cache
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    _formatted_data_cache.clear()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º log_bot_action –≤–º–µ—Å—Ç–æ –Ω–∞–ø—Ä—è–º—É—é database.log_user_action
    await log_bot_action("show_top_1")
    
    data = await database.get_top_apy()
    
    if not data:
        await send_telegram_request_async("editMessageText", {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": "No data available at the moment.",
            "reply_markup": {
                "inline_keyboard": [[{"text": "Back to Menu", "callback_data": "back_to_main"}]]
            }
        })
        await send_telegram_request_async("answerCallbackQuery", {
            "callback_query_id": query_id
        })
        return
    
    # Format date as DD/MM/YY
    today = datetime.datetime.now()
    formatted_date = today.strftime("%d/%m/%y")
    
    message = f"üí∞TOP STABLECOIN POOL {formatted_date}\n\n"
    message += format_top_apy_data(data, 1)
    message += "\n\n_Only the pools with more than $1M TVL are shown_"
    
    # Add back button
    back_keyboard = {
        "inline_keyboard": [
            [{"text": "Back to Menu", "callback_data": "back_to_main"}]
        ]
    }
    
    await send_telegram_request_async("editMessageText", {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": message,
        "reply_markup": back_keyboard,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    })
    
    await send_telegram_request_async("answerCallbackQuery", {
        "callback_query_id": query_id
    })

# Main function
async def main():
    """Main function to start the bot"""
    print("Starting bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP-—Å–µ—Å—Å–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await setup_aiohttp_session()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_hour = config.NOTIFICATION_HOUR
    notification_minute = config.NOTIFICATION_MINUTE
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
    formatted_time = f"{notification_hour:02d}:{notification_minute:02d}"
    print(f"Setting up daily notification for {formatted_time} UTC")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ UTC
    job = scheduler.add_job(
        send_daily_notification,
        CronTrigger(hour=notification_hour, minute=notification_minute, timezone=pytz.UTC),
        id='daily_notification',
        replace_existing=True
    )
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await setup_cache_updater()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞
    scheduler.start()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    next_run = job.next_run_time
    utc_now = datetime.datetime.now(pytz.UTC)
    
    print(f"Current UTC time: {utc_now}")
    print(f"Scheduler started - next notification at {next_run}")
    print(f"Time until next notification: {next_run - utc_now}")
    
    # Start polling
    try:
        await poll_updates()
    finally:
        if session:
            await session.close()

# Start the bot
if __name__ == "__main__":
    asyncio.run(main())

async def send_top_apy(chat_id, message_id=None):
    """Send top APY with debugging info"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫—ç—à–∞
        data = await database.get_top_apy()
        
        if not data:
            await send_telegram_request_async("sendMessage", {
                "chat_id": chat_id,
                "text": "No APY data available at the moment."
            })
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        message = "üí∞ TOP STABLECOIN POOL (LIVE DATA)\n\n"
        message += format_top_apy_data(data, 1)
        message += "\n\n_Only pools with more than $1M TVL are shown_"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = {
            "inline_keyboard": [[{"text": "Back to Menu", "callback_data": "back_to_main"}]]
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_id:
            await send_telegram_request_async("editMessageText", {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": message,
                "parse_mode": "Markdown",
                "reply_markup": keyboard,
                "disable_web_page_preview": True
            })
        else:
            await send_telegram_request_async("sendMessage", {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "Markdown",
                "reply_markup": keyboard,
                "disable_web_page_preview": True
            })
            
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        error_message = f"Error fetching top APY data: {e}"
        print(f"[ERROR] {error_message}")
        
        await send_telegram_request_async("sendMessage", {
            "chat_id": chat_id,
            "text": "Sorry, couldn't fetch APY data at the moment. Please try again later."
        }) 